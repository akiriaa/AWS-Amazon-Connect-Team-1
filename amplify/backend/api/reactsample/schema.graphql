type Meeting @model (mutations: {create: "createMeetingGraphQL", delete: "deleteMeetingGraphQL"}, subscriptions: null) @auth(rules: [{ allow: public }]){
  meetingId: String!
  title: String! @primaryKey
  data: String!
}

type Attendee @model(mutations: {create: "createAttendeeGraphQL", delete: "deleteAttendeeGraphQL"}, subscriptions: null) @auth(rules: [{ allow: public }]){
  attendeeId: String! @primaryKey
  name: String!
}

type Query {
  createChimeMeeting(title: String, name: String, region: String): Response @function(name: "ChimeMeeting-${env}")
  joinChimeMeeting(meetingId: String, name: String): Response @function(name: "ChimeMeeting-${env}")
  endChimeMeeting(meetingId: String): Response  @function(name: "ChimeMeeting-${env}")
}

type Response {
  statusCode: String!
  headers: String
  body: String
  isBase64Encoded: String
}
